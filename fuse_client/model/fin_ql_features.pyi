# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinQLFeatures(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            text = schemas.StrSchema
        
            @staticmethod
            def individual_merchant() -> typing.Type['FinQLIndividualMerchantFeature']:
                return FinQLIndividualMerchantFeature
        
            @staticmethod
            def time_based() -> typing.Type['FinQLTimeBasedFeature']:
                return FinQLTimeBasedFeature
        
            @staticmethod
            def interest() -> typing.Type['FinQLInterestFeature']:
                return FinQLInterestFeature
        
            @staticmethod
            def frequency() -> typing.Type['FinQLFrequencyFeature']:
                return FinQLFrequencyFeature
        
            @staticmethod
            def trend() -> typing.Type['FinQLTrendFeature']:
                return FinQLTrendFeature
        
            @staticmethod
            def top_merchants() -> typing.Type['FinQLTopMerchantsFeature']:
                return FinQLTopMerchantsFeature
        
            @staticmethod
            def comparison() -> typing.Type['FinQLComparisonFeature']:
                return FinQLComparisonFeature
        
            @staticmethod
            def merchant_categories() -> typing.Type['FinQLMerchantCategoriesFeature']:
                return FinQLMerchantCategoriesFeature
            inferred = schemas.DictSchema
            __annotations__ = {
                "text": text,
                "individual_merchant": individual_merchant,
                "time_based": time_based,
                "interest": interest,
                "frequency": frequency,
                "trend": trend,
                "top_merchants": top_merchants,
                "comparison": comparison,
                "merchant_categories": merchant_categories,
                "inferred": inferred,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["individual_merchant"]) -> 'FinQLIndividualMerchantFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_based"]) -> 'FinQLTimeBasedFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interest"]) -> 'FinQLInterestFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> 'FinQLFrequencyFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trend"]) -> 'FinQLTrendFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["top_merchants"]) -> 'FinQLTopMerchantsFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comparison"]) -> 'FinQLComparisonFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_categories"]) -> 'FinQLMerchantCategoriesFeature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inferred"]) -> MetaOapg.properties.inferred: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "individual_merchant", "time_based", "interest", "frequency", "trend", "top_merchants", "comparison", "merchant_categories", "inferred", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["individual_merchant"]) -> typing.Union['FinQLIndividualMerchantFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_based"]) -> typing.Union['FinQLTimeBasedFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interest"]) -> typing.Union['FinQLInterestFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union['FinQLFrequencyFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trend"]) -> typing.Union['FinQLTrendFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["top_merchants"]) -> typing.Union['FinQLTopMerchantsFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comparison"]) -> typing.Union['FinQLComparisonFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_categories"]) -> typing.Union['FinQLMerchantCategoriesFeature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inferred"]) -> typing.Union[MetaOapg.properties.inferred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "individual_merchant", "time_based", "interest", "frequency", "trend", "top_merchants", "comparison", "merchant_categories", "inferred", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        individual_merchant: typing.Union['FinQLIndividualMerchantFeature', schemas.Unset] = schemas.unset,
        time_based: typing.Union['FinQLTimeBasedFeature', schemas.Unset] = schemas.unset,
        interest: typing.Union['FinQLInterestFeature', schemas.Unset] = schemas.unset,
        frequency: typing.Union['FinQLFrequencyFeature', schemas.Unset] = schemas.unset,
        trend: typing.Union['FinQLTrendFeature', schemas.Unset] = schemas.unset,
        top_merchants: typing.Union['FinQLTopMerchantsFeature', schemas.Unset] = schemas.unset,
        comparison: typing.Union['FinQLComparisonFeature', schemas.Unset] = schemas.unset,
        merchant_categories: typing.Union['FinQLMerchantCategoriesFeature', schemas.Unset] = schemas.unset,
        inferred: typing.Union[MetaOapg.properties.inferred, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinQLFeatures':
        return super().__new__(
            cls,
            *_args,
            text=text,
            individual_merchant=individual_merchant,
            time_based=time_based,
            interest=interest,
            frequency=frequency,
            trend=trend,
            top_merchants=top_merchants,
            comparison=comparison,
            merchant_categories=merchant_categories,
            inferred=inferred,
            _configuration=_configuration,
            **kwargs,
        )

from fuse_client.model.fin_ql_comparison_feature import FinQLComparisonFeature
from fuse_client.model.fin_ql_frequency_feature import FinQLFrequencyFeature
from fuse_client.model.fin_ql_individual_merchant_feature import FinQLIndividualMerchantFeature
from fuse_client.model.fin_ql_interest_feature import FinQLInterestFeature
from fuse_client.model.fin_ql_merchant_categories_feature import FinQLMerchantCategoriesFeature
from fuse_client.model.fin_ql_time_based_feature import FinQLTimeBasedFeature
from fuse_client.model.fin_ql_top_merchants_feature import FinQLTopMerchantsFeature
from fuse_client.model.fin_ql_trend_feature import FinQLTrendFeature
