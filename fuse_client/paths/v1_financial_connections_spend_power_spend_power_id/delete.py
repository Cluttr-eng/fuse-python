# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from fuse_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401

from fuse_client.model.delete_spend_power_response import DeleteSpendPowerResponse

from . import path

# Header params
FuseClientIdSchema = schemas.StrSchema
FuseApiKeySchema = schemas.StrSchema
PlaidClientIdSchema = schemas.StrSchema
PlaidSecretSchema = schemas.StrSchema
TellerApplicationIdSchema = schemas.StrSchema
TellerCertificateSchema = schemas.StrSchema
TellerPrivateKeySchema = schemas.StrSchema
TellerTokenSigningKeySchema = schemas.StrSchema
TellerSigningSecretSchema = schemas.StrSchema
MxClientIdSchema = schemas.StrSchema
MxApiKeySchema = schemas.StrSchema
SnaptradeClientIdSchema = schemas.StrSchema
SnaptradeConsumerKeySchema = schemas.StrSchema
FlinksCustomerIdSchema = schemas.StrSchema
FlinksUsInstanceIdSchema = schemas.StrSchema
FlinksCaInstanceIdSchema = schemas.StrSchema
FinicityPartnerIdSchema = schemas.StrSchema
FinicityPartnerSecretSchema = schemas.StrSchema
FinicityAppKeySchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'Fuse-Client-Id': typing.Union[FuseClientIdSchema, str, ],
        'Fuse-Api-Key': typing.Union[FuseApiKeySchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Plaid-Client-Id': typing.Union[PlaidClientIdSchema, str, ],
        'Plaid-Secret': typing.Union[PlaidSecretSchema, str, ],
        'Teller-Application-Id': typing.Union[TellerApplicationIdSchema, str, ],
        'Teller-Certificate': typing.Union[TellerCertificateSchema, str, ],
        'Teller-Private-Key': typing.Union[TellerPrivateKeySchema, str, ],
        'Teller-Token-Signing-Key': typing.Union[TellerTokenSigningKeySchema, str, ],
        'Teller-Signing-Secret': typing.Union[TellerSigningSecretSchema, str, ],
        'Mx-Client-Id': typing.Union[MxClientIdSchema, str, ],
        'Mx-Api-Key': typing.Union[MxApiKeySchema, str, ],
        'Snaptrade-Client-Id': typing.Union[SnaptradeClientIdSchema, str, ],
        'Snaptrade-Consumer-Key': typing.Union[SnaptradeConsumerKeySchema, str, ],
        'Flinks-Customer-Id': typing.Union[FlinksCustomerIdSchema, str, ],
        'Flinks-Us-Instance-Id': typing.Union[FlinksUsInstanceIdSchema, str, ],
        'Flinks-Ca-Instance-Id': typing.Union[FlinksCaInstanceIdSchema, str, ],
        'Finicity-Partner-Id': typing.Union[FinicityPartnerIdSchema, str, ],
        'Finicity-Partner-Secret': typing.Union[FinicityPartnerSecretSchema, str, ],
        'Finicity-App-Key': typing.Union[FinicityAppKeySchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_fuse_client_id = api_client.HeaderParameter(
    name="Fuse-Client-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FuseClientIdSchema,
    required=True,
)
request_header_fuse_api_key = api_client.HeaderParameter(
    name="Fuse-Api-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FuseApiKeySchema,
    required=True,
)
request_header_plaid_client_id = api_client.HeaderParameter(
    name="Plaid-Client-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PlaidClientIdSchema,
)
request_header_plaid_secret = api_client.HeaderParameter(
    name="Plaid-Secret",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PlaidSecretSchema,
)
request_header_teller_application_id = api_client.HeaderParameter(
    name="Teller-Application-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TellerApplicationIdSchema,
)
request_header_teller_certificate = api_client.HeaderParameter(
    name="Teller-Certificate",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TellerCertificateSchema,
)
request_header_teller_private_key = api_client.HeaderParameter(
    name="Teller-Private-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TellerPrivateKeySchema,
)
request_header_teller_token_signing_key = api_client.HeaderParameter(
    name="Teller-Token-Signing-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TellerTokenSigningKeySchema,
)
request_header_teller_signing_secret = api_client.HeaderParameter(
    name="Teller-Signing-Secret",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TellerSigningSecretSchema,
)
request_header_mx_client_id = api_client.HeaderParameter(
    name="Mx-Client-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=MxClientIdSchema,
)
request_header_mx_api_key = api_client.HeaderParameter(
    name="Mx-Api-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=MxApiKeySchema,
)
request_header_snaptrade_client_id = api_client.HeaderParameter(
    name="Snaptrade-Client-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SnaptradeClientIdSchema,
)
request_header_snaptrade_consumer_key = api_client.HeaderParameter(
    name="Snaptrade-Consumer-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SnaptradeConsumerKeySchema,
)
request_header_flinks_customer_id = api_client.HeaderParameter(
    name="Flinks-Customer-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FlinksCustomerIdSchema,
)
request_header_flinks_us_instance_id = api_client.HeaderParameter(
    name="Flinks-Us-Instance-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FlinksUsInstanceIdSchema,
)
request_header_flinks_ca_instance_id = api_client.HeaderParameter(
    name="Flinks-Ca-Instance-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FlinksCaInstanceIdSchema,
)
request_header_finicity_partner_id = api_client.HeaderParameter(
    name="Finicity-Partner-Id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FinicityPartnerIdSchema,
)
request_header_finicity_partner_secret = api_client.HeaderParameter(
    name="Finicity-Partner-Secret",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FinicityPartnerSecretSchema,
)
request_header_finicity_app_key = api_client.HeaderParameter(
    name="Finicity-App-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FinicityAppKeySchema,
)
# Path params
SpendPowerIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'spend_power_id': typing.Union[SpendPowerIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_spend_power_id = api_client.PathParameter(
    name="spend_power_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SpendPowerIdSchema,
    required=True,
)
_auth = [
    'fuseApiKey',
    'fuseClientId',
]
SchemaFor200ResponseBodyApplicationJson = DeleteSpendPowerResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _delete_spend_power_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _delete_spend_power_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _delete_spend_power_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _delete_spend_power_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_spend_power_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_fuse_client_id,
            request_header_fuse_api_key,
            request_header_plaid_client_id,
            request_header_plaid_secret,
            request_header_teller_application_id,
            request_header_teller_certificate,
            request_header_teller_private_key,
            request_header_teller_token_signing_key,
            request_header_teller_signing_secret,
            request_header_mx_client_id,
            request_header_mx_api_key,
            request_header_snaptrade_client_id,
            request_header_snaptrade_consumer_key,
            request_header_flinks_customer_id,
            request_header_flinks_us_instance_id,
            request_header_flinks_ca_instance_id,
            request_header_finicity_partner_id,
            request_header_finicity_partner_secret,
            request_header_finicity_app_key,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='delete'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class DeleteSpendPower(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def delete_spend_power(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def delete_spend_power(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def delete_spend_power(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def delete_spend_power(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._delete_spend_power_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiFordelete(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def delete(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def delete(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def delete(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def delete(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._delete_spend_power_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


